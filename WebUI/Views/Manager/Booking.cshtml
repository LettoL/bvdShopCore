
@{
    ViewData["Title"] = "Booking";
    Layout = "~/Views/Shared/ManagerLayout.cshtml";
}
<div class="row">
    <div class="col-md-12">
        <div class="portlet" style="min-height: 800px;">
            <div class="portlet-title">
                <div class="portlet-head">
                    <h3>Бронирование товара</h3>
                </div>
                <div class="portlet-search">
                    <input id="product_search" v-model="query" type="text" class="form-control" placeholder="Поиск товара" />
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="portlet-body">
                <div id="form">
                    <div id="first_step">
                        <div class="row">
                            <div class="col-md-3" style="max-height: 520px; overflow: auto;">
                                <div id="category">
                                    <ul class="list-group">
                                        <h5>Категории</h5>
                                        <li v-for="category in categories">
                                            <button class="list-group-item list-group-item-action" v-on:click="categoryClick(category.title)">{{category.title}} </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-3" style="max-height: 520px; overflow: auto;">
                                <div id="products">
                                    <ul class="list-group">
                                        <h5>Товары</h5>
                                        <li v-for="product in productsSort">
                                            <button class="list-group-item list-group-item-action" v-on:click="productClick(product)">{{product.title}} (<b>{{product.amount}} шт.</b>)</button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                            <div class="col-md-6" style="max-height: 520px; overflow: auto;">
                                <div id="sale_product">
                                    <ul class="list-group">
                                        <h5>Выбранные товары</h5>
                                        <li class="list-group-item" style="text-align: center;" v-for="(product, index) in products">
                                            <b>{{product.title}}</b>
                                            <input class="form-control amount" type="number" v-model="product.amount" />
                                            <span>Дополнительный:</span>
                                            <input class="check" type="checkbox" v-model="product.additional" />
                                            <button v-on:click="deleteProduct(index)" style="margin-left: 20px;" class="btn btn-danger">
                                                <i class="fa fa-times" aria-hidden="true"></i>
                                            </button>
                                        </li>
                                    </ul>
                                </div>
                            </div>
                        </div>
                        <div id="buyer">
                            <select class="form-control" v-model="buyer">
                                <option>Обычный покупатель</option>
                                @foreach (var p in ViewBag.Partners)
                                {
                                    <option>@p.Title</option>
                                }
                            </select>
                        </div>
                    </div>
                    <div class="steps">
                        <button class="nextStep btn btn-dark" onclick="changeStep('second'); saleForm.costInit(); saleForm.initProps(); saleProduct.amountCheck()">Далее</button>
                    </div>
                </div>
                <div id="second_step" style="display: none">
                    <div id="sale_form">
                        <div class="row">
                            <div class="col-md-4">

                                <label>Скидка</label>
                                <input class="form-control" v-model="discount" />

                                <label>Стоимость</label>
                                <input v-if="buyer == 'Обычный покупатель'" readonly class="form-control" v-model="cost" style="margin-bottom: 20px;" />
                                <input v-if="buyer != 'Обычный покупатель'" class="form-control" v-model="cost" style="margin-bottom: 20px;" />

                                <label>Внесение наличных средств</label>
                                <input class="form-control" v-model="cashMoney" />

                                <label>Внесение безналичных средств</label>
                                <input class="form-control" v-model="cashlessMoney" />

                                <label>Перевести безналичные средства на</label>
                                <select id="moneyWorkerType" class="form-control" v-model="moneyWorkerType" onchange="saleForm.getMoneyWorkers(this.value)">
                                    <option value="null">Не отправлять</option>
                                    <option value="1">Держатель Карты</option>
                                    <option value="2">Рассчетный Счет</option>
                                </select> <br />

                                <select id="moneyWorkerId" class="form-control" v-model="moneyWorkerId">
                                    <option disabled selected value="null">Выбрать</option>
                                </select>

                                <label>Продажа по России</label>
                                <select id="forRussian" class="form-control" v-model="forRussian">
                                    <option value="true">Да</option>
                                    <option value="false">Нет</option>
                                </select> <br />

                            </div>
                            <div v-if="buyer !== 'Обычный покупатель'" class="col-lg-6 col-md-8">
                                <ul class="list-group">
                                    <h6>Стоимость товаров за 1 штуку</h6>
                                    <li class="list-group-item" v-for="product in products">
                                        <b>Название:</b> {{product.title}} / <b>Стоимость:</b> <input v-model="product.cost"/>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    </div>
                    <div class="steps">
                        <button class="prevStep btn btn-dark" onclick="changeStep('first')">Назад</button>
                        <button class="nextStep btn btn-dark" onclick="changeStep('third'); saleForm.cashlessCheck(); confirmForm.initProps()">Далее</button>
                    </div>
                </div>
                <div id="third_step" style="display: none">
                    <div id="confirm_form">
                        <div class="row">
                            <div class="col-md-6 col-sm-12">
                                <ul class="list-group order">
                                    <li class="list-group-item">Скидка: {{discount}}</li>
                                    <li class="list-group-item">Сумма: {{sum}}</li>
                                    <li class="list-group-item">Внесенные наличные средства: {{cashSum}}</li>
                                    <li class="list-group-item">Внесенные безналичные средства: {{cashlessSum}}</li>
                                    <li class="list-group-item">Продажа по России: {{russianStatus}}</li>
                                </ul>
                            </div>
                            <div class="col-lg-6 col-md-12">
                                <ul class="list-group">
                                    <li class="list-group-item" v-for="product in products">
                                        <b>Название:</b> {{product.title}} / <b>К-во:</b> {{product.amount}} / <b>Дополнительный:</b> <span v-if="product.additional">Да</span><span v-if="!product.additional">Нет</span>
                                    </li>
                                </ul>
                            </div>
                        </div>

                    </div>
                    <div class="steps">
                        <button class="prevStep btn btn-dark" onclick="changeStep('second')">Назад</button>
                        <button class="btn btn-dark" onclick="send(); this.disabled=true;">Отправить</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>

<script>
    var curStep = "first";
    var userId = @ViewBag.userId;
    console.log("Пользователь с ID: " + userId);

    var productSearch = new Vue({
        el: "#product_search",
        data: {
            query: ""
        },
        watch: {
            query: function(val) {
                product.searchQuery = val;
            }
        }
    });

    var category = new Vue({
        el: "#category",
        data: {
            categories: []
        },
        methods: {
            categoryClick: function(category) {
                product.curCategory = category;
            }
        },
        created: function() {
            fetch('/Category/Get', {
                    headers: { "Content-Type": "application/json" },
                    credentials: 'include'
                })
                .then((res) => {
                    return res.json();
                })
                .then((json) => {
                    json.forEach(item => {
                        this.categories.push({
                            title: item.title
                        });
                    });
                });
        }
    });

    var product = new Vue({
        el: "#products",
        data: {
            curCategory: "",
            products: [],
            searchQuery: ""
        },
        computed: {
            productsSort: {
                get: function () {
                    if (this.searchQuery == "") {
                        if (this.curCategory !== "")
                            return this.products.filter(x => x.category === this.curCategory);
                        else
                            return this.products;
                    }
                    else {
                        return this.products.filter(x => x.title.toLowerCase().includes(this.searchQuery.toLowerCase()));
                    }

                },
                set: function(category) {
                    this.curCategory = category;
                }
            },
            productsSearch: {
                get: function () {
                    if (this.searchQuery !== "")
                        return this.product.filter(product => {
                            return product.title.toLowerCase().includes(this.searchQuery.toLowerCase())
                        })
                },
                set: function (searchQuery) {
                    this.searchQuery = searchQuery
                }
            }
        },
        methods: {
            productClick: function (product) {
                var product = { id: product.id, title: product.title, amount: 1, additional: false, cost: product.cost }
                saleProduct.products.push(product);
            }
        },
        created: function () {
            fetch('/Product/Get/' + userId, {
                    headers: { "Content-Type": "application/json" },
                    credentials: 'include'
                })
                .then((res) => {
                    return res.json();
                })
                .then((json) => {
                    json.forEach(item => {
                        if (item.title != null) {
                            this.products.push({
                                id: item.id,
                                title: item.title,
                                cost: item.cost,
                                category: item.category.title,
                                amount: item.amount
                            });
                        }
                        
                    });
                });
        }
    });

    var saleProduct = new Vue({
        el: "#sale_product",
        data: {
            products: []
        },
        methods: {
            deleteProduct: function (index) {
                this.products.splice(index, 1);
            },
            amountCheck: function (index) {

                for (let item of this.products) {

                    let same_products = this.products.filter(x => x.id == item.id);
                    let stock_amount = +product.products.find(x => x.id == item.id).amount;
                    let items_amount = 0;

                    same_products.forEach(item => {
                        items_amount += +item.amount;
                    });

                    if (items_amount > stock_amount) {
                        alert("Количество товаров в бронировании превышает количество товаров на складе!")
                        break
                    }
                }
            }
        }
    });

    var buyer = new Vue({
        el: "#buyer",
        data: {
            buyer: "Обычный покупатель",
        }
    });

    var saleForm = new Vue({
        el: "#sale_form",
        data: {
            discount: 0,
            buyer: "",
            cost: 0,
            cashMoney: 0,
            cashlessMoney: 0,
            cashless: false,
            products: [],
            moneyWorkerType: null,
            moneyWorkerId: null,
            error: null,
            forRussian: "false",
        },
        methods: {
            initProps: function () {
                saleForm.products = saleProduct.products;
                saleForm.buyer = buyer.buyer;
                saleForm.error = null;
            },
            costInit: function() {
                saleForm.cost = buyer.buyer !== "Обычный покупатель" ? 0 : sumCost(saleProduct.products);
            },
            getMoneyWorkers: function (value) {
                if (value > 0) {
                    $('#moneyWorkerId').html('<option disabled selected value="null">Выбрать</option>');
                    $.when(
                        $.get('/Manager/GetMoneyWorkersForSale/' + value)
                    ).done(function(data) {
                        $.each(data,
                            function() {
                                $('#moneyWorkerId').append('<option value="' +
                                    this.id +
                                    '">' +
                                    this.title +
                                    '</option>');
                            });
                    });
                } else {
                    $('#moneyWorkerId').html('');
                }
            },
            cashlessCheck: function () {
                if (this.cashlessMoney > 0 && this.moneyWorkerType == null || this.moneyWorkerType == "null") {
                    alert('Вы не указали получателя для безналичных средств')
                }
            }
        },
        computed: {
            pay: function () {
                return +this.cashMoney + +this.cashlessMoney;
            }
        },
        watch: {
            pay: function() {
                if (+this.cost !== this.pay) {
                    this.error = "Введенная сумма не равна стоимости выбранных продуктов";
                }
                else if(+this.cost == this.pay) {
                    this.error = null;
                }
            },
            products: {
                handler(val) {
                    this.cost = sumCost(this.products);
                },
                deep: true
            }

        },
        
    });

    var confirmForm = new Vue({
        el: "#confirm_form",
        data: {
            discount: 0,
            products: [],
            cashSum: 0,
            cashlessSum: 0,
            moneyWorkerId: null,
            sum: 0,
            buyer: "",
            forRussian: null,
            russianStatus: "Да"
        },
        methods: {
            initProps: function() {
                confirmForm.products = saleProduct.products;
                confirmForm.sum = saleForm.cost;
                confirmForm.cashSum = saleForm.cashMoney;
                confirmForm.cashlessSum = saleForm.cashlessMoney;
                confirmForm.moneyWorkerId = saleForm.moneyWorkerId;
                confirmForm.buyer = buyer.buyer;
                confirmForm.discount = saleForm.discount;
                confirmForm.forRussian = saleForm.forRussian;
            },
            sendData: function () {
                this.products.forEach(product => {
                    product.amount = +(product.amount)
                    product.cost = +(product.cost)
                    delete product.category;
                });

                var realization = {
                    discount: +this.discount,
                    products: this.products,
                    sum: this.sum - this.discount,
                    cashSum: +this.cashSum,
                    cashlessSum: +this.cashlessSum,
                    moneyWorkerId: +this.moneyWorkerId,
                    userId: userId,
                    bookingType: 0,
                    buyer: this.buyer,
                    forRussian: JSON.parse(this.forRussian.toLowerCase())
                }

                /*var xhr = new XMLHttpRequest();
                xhr.open("Post", "/Manager/Booking");
                xhr.setRequestHeader('Content-Type', 'application/json');
                xhr.send(JSON.stringify(realization));*/

                return fetch("/Manager/Booking",
                    {
                        method: "POST",
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        credentials: 'include',
                        redirect: 'follow',
                        body: JSON.stringify(realization)
                    });
            }
        },
        watch: {
            forRussian: function () {
                if (this.forRussian == "true")
                    this.russianStatus = "Да"
                else
                    this.russianStatus = "Нет"
            }
        }
    });

    var sumCost = function (products) {
        var sum = 0;
        for (var i = 0; i < products.length; i++) {
            sum += products[i].cost * products[i].amount;
        }

        return sum;
    };

    function changeStep(step) {
        document.getElementById(curStep + "_step").style.display = "none";
        this.curStep = step;
        document.getElementById(step + "_step").style.display = "block";
    }

    function send() {
        let productZeroCost = false;

        if (this.confirmForm.products.some(checkZeroProductCost))
            productZeroCost = true;

        if (productZeroCost == false)
            this.confirmForm.sendData().then(res => window.location.href = res.url)
        else
            alert('В продаже присутствуют товары с нулевой стоимостью')
    }

    function checkZeroProductCost(product) {
        return +product.cost == 0
    }

</script>
