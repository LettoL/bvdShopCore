
@{
    ViewData["Title"] = "SaledProducts";
    Layout = "~/Views/Shared/AdminLayout.cshtml";
}

<style>
  .portlet-title {
    padding-left: 0px;
  }

  .portlet-filters {
    display: flex;
    justify-content: flex-start;
    align-items: center;
  }

  .portlet-filters select {
    margin-right: 5px
  }

  .portlet-filters label {
    margin-left: 5px;

    min-width: 70px;
  }

  .portlet-filters button {
    margin-left: 10px;
  }

</style>

<h3 class="page-title">Проданные товары</h3> 
<div id='saledProducts' class="row">
    <div class="col-md-12">
        <div class="portlet">
            <div class="portlet-title">
                <div class="portlet-filters">                 
                    <select v-model="filterState.shopId" class="form-control">
                        <option :value="null">Выбрать магазин</option>
                        <option v-for='item in shops' :value='item.id'>{{item.title}}</option>     
                    </select>
                    <select v-model="filterState.categoryId" class="form-control">
                        <option :value="null">Выбрать категорию</option>
                        <option v-for='item in categories' :value='item.id'>{{item.title}}</option>                       
                    </select>
                    <select v-model="filterState.suppliersId" class="form-control">
                        <option :value="null">Выбрать поставщика</option>
                        <option v-for='item in suppliers' :value='item.id'>{{item.name}}</option>
                    </select>

                    <input id='dateFilter1' placeholder="Дата с:" v-model='dateFrom' class="form-control" type='text' />
                    <input id='dateFilter2' placeholder="Дата по:" v-model='dateFor' class="form-control" type='text' />
                    <button class="btn btn-dark" v-on:click='getSaledProductsByDates' style="margin-right: 5px">Поиск по датам</button>
                    <download-excel 
                      class="btn btn-dark"
                      :data="displayedData"
                      :fields="jsonFields"
                      :name='exportName'>
                      Экспорт
                    </download-excel>
                </div>                                 
            </div>
            <div class="portlet-body">
                <div v-if='loading'>
                  <b>Загрузка...</b>
                </div>
                <div class="table-responsive" v-if='!loading'>
                    <table class="table table-striped">
                        <thead>
                          <tr>
                              <th v-on:click='setSortState("title")' style='cursor: pointer'>Название</th>
                              <th v-on:click='setSortState("amount")' style='cursor: pointer'>Количество</th>
                              <th v-on:click='setSortState("shopTitle")' style='cursor: pointer'>Магазин</th>
                          </tr>
                        </thead>
                        <tbody>
                          <tr v-for="item in displayedData">
                              <td>{{item.title}}</td>
                              <td>{{item.amount}}</td>
                              <td>{{item.shopTitle}}</td>
                          </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>


<script src="https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"></script>
<script src='https://cdn.jsdelivr.net/npm/vue-json-excel@0.3.0/dist/vue-json-excel.umd.min.js'></script>
<link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
<script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>


<script>
  Vue.component('downloadExcel', JsonExcel)

  const saledProductsList = new Vue({
    el: '#saledProducts',
    data: {
      loading: false,
      saledProducts: [],
      filterState: {
        shopId: null,
        categoryId: null,
        suppliersId: null
      },
      sortState: {
        key: 'amount',
        direction: 'DESC'
      },

      dateFrom: null,
      dateFor: null,

      categories: [],
      shops: [],
      suppliers: [],

      jsonFields: {
        "Товар": "title",
        "Количество": "amount",
        "Магазин": "shopTitle",   
      },
    },
    created: function () {
      this.getCategories();
      this.getShops();
      this.getSuppliers();
      this.getTodaySaledProducts();
    },
    methods: {
      setDateFrom: function(value) {
        this.dateFrom = value;
      },
      setDateFor: function(value) {
        this.dateFor = value;
      },
      getTodaySaledProducts: function () {
        fetch('/api/SaledProducts/', {
            headers: {'Content-Type': 'application/json'},
            credentials: 'include',
            method: 'GET'
          })
            .then((res) => {
              return res.json()
            })
            .then((res) => {
              this.saledProducts = this.sortData(res, this.sortState);             
            })
      },
      setSortState: function(key) {
        if(this.sortState.key === key)
          this.sortState.direction = this.sortState.direction === 'ASC' ? 'DESC' : 'ASC';
        else {
          this.sortState.key = key;
          this.sortState.direction = 'DESC';
        }

        this.saledProducts = this.sortData(this.saledProducts, this.sortState);
      },
      filterData: function(entities, filterState) {
        let result = entities;

        for(let key in filterState) {
            if(this.filterState[key])
              result = result.filter(item => item[key].length ? item[key].includes(this.filterState[key]) : item[key] === this.filterState[key])
        }

        return result;
      },
      sortData: function(entities, sortState) {
        if(sortState.direction === 'ASC')
          return entities.sort((a, b) => { 
            if(a[sortState.key] > b[sortState.key]) {
              return 1
            }
            if(a[sortState.key] < b[sortState.key]) {
              return -1
            }
            return 0;
          })

        if(sortState.direction === 'DESC')
          return entities.sort((a, b) => {
            if(b[sortState.key] > a[sortState.key]) {
              return 1
            }
            if(b[sortState.key] < a[sortState.key]) {
              return -1
            }
            return 0;
          })
      },
      getSaledProductsByDates: function() {
        this.loading = true;

        const body = {
          from: this.formateDate(this.dateFrom),
          to: this.formateDate(this.dateFor)
        }

        fetch('/api/SaledProducts/byDates', {
            headers: {'Content-Type': 'application/json'},
            credentials: 'include',
            method: 'POST',
            body: JSON.stringify(body)
          })
            .then((res) => {
              return res.json()
            })
            .then((res) => {
              this.loading = false;
              this.saledProducts = this.sortData(res, this.sortState);             
          })
      },

      getCategories: function() {
          fetch('/Category/Get', {
              headers: {'Content-Type': 'application/json'},
              credentials: 'include'
              })
              .then((res) => {
                  return res.json()
              })
              .then((res) => {
                  this.categories = res;
          })
      },
      getShops: function() {
          fetch('/Shop/Get', {
              headers: {'Content-Type': 'application/json'},
              credentials: 'include'
              })
              .then((res) => {
                  return res.json()
              })
              .then((res) => {
                  this.shops = res;
          })
      },
      getSuppliers: function() {
          fetch('/api/Suppliers', {
            headers: {'Content-Type': 'application/json'},
            credentials: 'include'
          })
          .then((res) => {
            return res.json()
          })
          .then((res) => {
            this.suppliers = res;
          })
      },
      formateDate: function(date) {
          const result = date.split('.').reverse().join('-');
          return result;
      }
    },
    computed: {
      displayedData: function() {
        let result = [...this.saledProducts];

        result = this.filterData(result, this.filterState);

        return result;
      },
      exportName: function() {
        return `Проданные_Товары${this.dateFrom ? '_с ' + this.dateFrom : ''}${this.dateFor ? '_по ' + this.dateFor : ''}`
      }
    }

  })
</script>

<script type="text/javascript">
    (function (factory) {
        if (typeof define === "function" && define.amd) {

            define(["../widgets/datepicker"], factory);
        } else {

            factory(jQuery.datepicker);
        }
    }(function (datepicker) {

        datepicker.regional.ru = {
            closeText: "Закрыть",
            prevText: "&#x3C;Пред",
            nextText: "След&#x3E;",
            currentText: "Сегодня",
            monthNames: ["Январь", "Февраль", "Март", "Апрель", "Май", "Июнь",
                "Июль", "Август", "Сентябрь", "Октябрь", "Ноябрь", "Декабрь"],
            monthNamesShort: ["Янв", "Фев", "Мар", "Апр", "Май", "Июн",
                "Июл", "Авг", "Сен", "Окт", "Ноя", "Дек"],
            dayNames: ["воскресенье", "понедельник", "вторник", "среда", "четверг", "пятница", "суббота"],
            dayNamesShort: ["вск", "пнд", "втр", "срд", "чтв", "птн", "сбт"],
            dayNamesMin: ["Вс", "Пн", "Вт", "Ср", "Чт", "Пт", "Сб"],
            weekHeader: "Нед",
            dateFormat: "dd.mm.yy",
            firstDay: 1,
            isRTL: false,
            showMonthAfterYear: false,
            yearSuffix: ""
        };
        datepicker.setDefaults(datepicker.regional.ru);

        return datepicker.regional.ru;

    }));

    $(function () {
        $.datepicker.setDefaults($.datepicker.regional["ru"]);
        $("#dateFilter1").datepicker({
          onSelect: function (dateText) {
            saledProductsList.setDateFrom(dateText)
          },     
        });
        $("#dateFilter2").datepicker({
          onSelect: function (dateText) {
            saledProductsList.setDateFor(dateText)
          }
        });
    });
</script>