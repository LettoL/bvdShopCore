{"version":3,"sources":["hooks/http.hook.js","pages/admin/products.page.js","pages/admin/products-history.page.js","App.js","index.js"],"names":["useHttp","useState","loading","setLoading","error","setError","request","useCallback","url","a","method","body","headers","JSON","stringify","fetch","response","json","data","ok","Error","message","clearError","makeStyles","theme","formControl","margin","spacing","minWidth","selectEmpty","marginTop","ProductsHistory","classes","useStyles","products","setProducts","shops","setShops","shop","setShop","page","setPage","rowsPerPage","setRowsPerPage","startDate","setStartDate","endDate","setEndDate","getProducts","map","product","date","Date","dateTime","getShops","useEffect","Paper","FormControl","className","InputLabel","id","Select","labelId","value","onChange","event","target","MenuItem","key","title","TextField","label","type","defaultValue","textField","InputLabelProps","shrink","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","filter","row","shopId","slice","toLocaleDateString","productTitle","amount","supplierName","shopTitle","TablePagination","rowsPerPageOptions","component","count","length","onChangePage","newPage","onChangeRowsPerPage","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71e20563.chunk.js","sourcesContent":["import {useCallback, useState} from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [loading, setLoading] = useState(false)\r\n  const [error, setError] = useState(null)\r\n  \r\n  const request = useCallback(async (url, method = 'GET', body = null, headers = {}) => {\r\n    setLoading(true)\r\n    try {\r\n      if(body) {\r\n        body = JSON.stringify(body)\r\n        headers['Content-Type'] = 'application/json'\r\n      }\r\n      \r\n      const response = await fetch(url, {method, body, headers})\r\n      const data = await response.json()\r\n      \r\n      if(!response.ok) {\r\n        throw new Error(data.message || 'Что-то не так')\r\n      }\r\n      \r\n      setLoading(false)\r\n      \r\n      return data;\r\n    } \r\n    catch (e) {\r\n      setLoading(false)\r\n      setError(e.message)\r\n      throw e\r\n    }\r\n  }, [])\r\n  \r\n  const clearError = useCallback(() => setError(null), [])\r\n  return {loading, request, error, clearError}\r\n}","import React, {useCallback, useEffect, useState} from 'react'\r\nimport {useHttp} from \"../../hooks/http.hook\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport const ProductsPage = () => {\r\n  const classes = useStyles();\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const [shop, setShop] = useState(0);\r\n  const [category, setCategory] = useState(0);\r\n  const [title, setTitle] = useState('');\r\n\r\n  const {loading, request} = useHttp()\r\n  const [products, setProducts] = useState([]);\r\n  const [shops, setShops] = useState([])\r\n  const [categories, setCategories] = useState([])\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeShop = (event) => {\r\n    setShop(event.target.value);\r\n  };\r\n\r\n  const handleChangeCategory = event => {\r\n    setCategory(event.target.value)\r\n  }\r\n\r\n  const handleChangeTitle = event => {\r\n    setTitle(event.target.value)\r\n  }\r\n\r\n  const getProducts = useCallback(async () => {\r\n    try {\r\n      const data = await request('http://localhost:5000/api/products')\r\n      setProducts(data)\r\n    }\r\n    catch (e) {}\r\n  }, [request])\r\n\r\n  const getShops = useCallback(async () => {\r\n    try {\r\n      const data = await request('http://localhost:5000/api/shops')\r\n      setShops(data)\r\n    }\r\n    catch (e) {}\r\n  }, [request])\r\n\r\n  const getCategories = useCallback(async () => {\r\n    try {\r\n      const data = await request('http://localhost:5000/api/categories')\r\n      setCategories(data)\r\n    }\r\n    catch (e) {\r\n    }\r\n  }, [request])\r\n\r\n  useEffect(() => {\r\n    getProducts()\r\n    getShops()\r\n    getCategories()\r\n  }, [getProducts, getShops, getCategories])\r\n\r\n  if(loading)\r\n    return (\r\n      <div>Загрузка...</div>\r\n    )\r\n  else\r\n    return (\r\n      <Paper>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Магазин</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={shop}\r\n            onChange={handleChangeShop}\r\n          >\r\n            <MenuItem value={0}>Выбрать магазин</MenuItem>\r\n            {shops.map(shop => (\r\n              <MenuItem key={shop.id} value={shop.id}>{shop.title}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n          <InputLabel id=\"demo-simple-select-label\">Категория</InputLabel>\r\n          <Select\r\n            labelId=\"demo-simple-select-label\"\r\n            id=\"demo-simple-select\"\r\n            value={category}\r\n            onChange={handleChangeCategory}\r\n          >\r\n            <MenuItem value={0}>Выбрать категорию</MenuItem>\r\n            {categories.map(category => (\r\n              <MenuItem key={category.id} value={category.id}>{category.title}</MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n        <FormControl className={classes.formControl}>\r\n          <TextField\r\n            label=\"Поиск по названию\"\r\n            onChange={handleChangeTitle}\r\n          />\r\n        </FormControl>\r\n        <TableContainer>\r\n          <Table>\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Артикул</TableCell>\r\n                <TableCell>Название</TableCell>\r\n                <TableCell>Количество</TableCell>\r\n                <TableCell>Цена</TableCell>\r\n                <TableCell>Магазин</TableCell>\r\n                <TableCell>Категория</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              {products\r\n                .filter(row => shop !== 0\r\n                  ? row.shopId === shop\r\n                  : true)\r\n                .filter(row => category !== 0\r\n                  ? row.categoryId === category\r\n                  : true)\r\n                .filter(row => title !== ''\r\n                  ? row.title.toLowerCase().includes(title.toLowerCase())\r\n                  : true)\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map(row => (\r\n                <TableRow key={row.id}>\r\n                  <TableCell>{row.code}</TableCell>\r\n                  <TableCell>{row.title}</TableCell>\r\n                  <TableCell>{row.amount}</TableCell>\r\n                  <TableCell>{row.price}</TableCell>\r\n                  <TableCell>{row.shop}</TableCell>\r\n                  <TableCell>{row.category}</TableCell>\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        <TablePagination\r\n          rowsPerPageOptions={[10, 25, 50, 100]}\r\n          component='div'\r\n          count={products\r\n            .filter(row => shop !== 0\r\n              ? row.shopId === shop\r\n              : true)\r\n            .filter(row => category !== 0\r\n              ? row.categoryId === category\r\n              : true)\r\n            .filter(row => title !== ''\r\n              ? row.title.toLowerCase().includes(title.toLowerCase())\r\n              : true)\r\n            .length}\r\n          rowsPerPage={rowsPerPage}\r\n          page={page}\r\n          onChangePage={handleChangePage}\r\n          onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n      </Paper>\r\n    )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));","import React, {useCallback, useEffect, useState} from 'react'\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport TableContainer from \"@material-ui/core/TableContainer\";\r\nimport Table from \"@material-ui/core/Table\";\r\nimport TableHead from \"@material-ui/core/TableHead\";\r\nimport TableRow from \"@material-ui/core/TableRow\";\r\nimport TableCell from \"@material-ui/core/TableCell\";\r\nimport TableBody from \"@material-ui/core/TableBody\";\r\nimport TablePagination from \"@material-ui/core/TablePagination\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {useHttp} from \"../../hooks/http.hook\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nexport const ProductsHistory = () => {\r\n  const classes = useStyles()\r\n  const [products, setProducts] = useState([])\r\n  const [shops, setShops] = useState([])\r\n  const [shop, setShop] = useState(0)\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(10);\r\n  const {loading, request} = useHttp()\r\n  const [startDate, setStartDate] = useState(null)\r\n  const [endDate, setEndDate] = useState(null)\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(+event.target.value);\r\n    setPage(0);\r\n  };\r\n\r\n  const handleChangeShop = (event) => {\r\n    setShop(event.target.value);\r\n  };\r\n\r\n  const getProducts = useCallback(async () => {\r\n    try {\r\n      const data = await request('http://localhost:5000/api/productsHistory')\r\n      setProducts(data.map(product => (\r\n        {...product, date: new Date(product.dateTime)}\r\n      )))\r\n    }\r\n    catch (e) {}\r\n  }, [request])\r\n\r\n  const getShops = useCallback(async () => {\r\n    try {\r\n      const data = await request('http://localhost:5000/api/shops')\r\n      setShops(data)\r\n    }\r\n    catch (e) {}\r\n  }, [request])\r\n\r\n  useEffect(() => {\r\n    getProducts()\r\n    getShops()\r\n  }, [getProducts, getShops])\r\n\r\n  return(\r\n    <Paper>\r\n      <FormControl className={classes.formControl}>\r\n        <InputLabel id=\"demo-simple-select-label\">Магазин</InputLabel>\r\n        <Select\r\n          labelId=\"demo-simple-select-label\"\r\n          id=\"demo-simple-select\"\r\n          value={shop}\r\n          onChange={handleChangeShop}\r\n        >\r\n          <MenuItem value={0}>Выбрать магазин</MenuItem>\r\n          {shops.map(shop => (\r\n            <MenuItem key={shop.id} value={shop.id}>{shop.title}</MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n      <FormControl className={classes.formControl}>\r\n        <TextField\r\n          label=\"Дата с\"\r\n          type=\"date\"\r\n          defaultValue=\"\"\r\n          className={classes.textField}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={event => setStartDate(new Date(event.target.value))}\r\n        />\r\n      </FormControl>\r\n      <FormControl className={classes.formControl}>\r\n        <TextField\r\n          label=\"Дата по\"\r\n          type=\"date\"\r\n          defaultValue=\"\"\r\n          className={classes.textField}\r\n          InputLabelProps={{\r\n            shrink: true,\r\n          }}\r\n          onChange={event => setEndDate(new Date(event.target.value))}\r\n        />\r\n      </FormControl>\r\n      <TableContainer>\r\n        <Table>\r\n          <TableHead>\r\n            <TableRow>\r\n              <TableCell>Дата</TableCell>\r\n              <TableCell>Товар</TableCell>\r\n              <TableCell>Количество</TableCell>\r\n              <TableCell>Поставщик</TableCell>\r\n              <TableCell>Тип</TableCell>\r\n              <TableCell>Магазин</TableCell>\r\n            </TableRow>\r\n          </TableHead>\r\n          <TableBody>\r\n            {products\r\n              .filter(row => shop !== 0\r\n                ? row.shopId === shop\r\n                : true)\r\n              .filter(row => startDate\r\n                ? row.date >= startDate\r\n                : true)\r\n              .filter(row => endDate\r\n                ? row.date <= endDate\r\n                : true)\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map(row => (\r\n              <TableRow key={row.id}>\r\n                <TableCell>{row.date.toLocaleDateString()}</TableCell>\r\n                <TableCell>{row.productTitle}</TableCell>\r\n                <TableCell>{row.amount}</TableCell>\r\n                <TableCell>{row.supplierName}</TableCell>\r\n                <TableCell>{row.type}</TableCell>\r\n                <TableCell>{row.shopTitle}</TableCell>\r\n              </TableRow>\r\n            ))}\r\n          </TableBody>\r\n        </Table>\r\n      </TableContainer>\r\n      <TablePagination\r\n        rowsPerPageOptions={[10, 25, 50, 100]}\r\n        component='div'\r\n        count={products\r\n          .filter(row => shop !== 0\r\n            ? row.shopId === shop\r\n            : true)\r\n          .filter(row => startDate\r\n            ? row.date >= startDate\r\n            : true)\r\n          .filter(row => endDate\r\n            ? row.date <= endDate\r\n            : true)\r\n          .length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onChangePage={handleChangePage}\r\n        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n      />\r\n    </Paper>\r\n  )\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  formControl: {\r\n    margin: theme.spacing(1),\r\n    minWidth: 120,\r\n  },\r\n  selectEmpty: {\r\n    marginTop: theme.spacing(2),\r\n  },\r\n}));","import React from 'react';\nimport {ProductsPage} from \"./pages/admin/products.page\";\nimport {ProductsHistory} from \"./pages/admin/products-history.page\";\n\nfunction App() {\n  return (\n    <div>\n      <ProductsHistory/>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}